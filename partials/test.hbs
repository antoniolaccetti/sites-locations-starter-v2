<div id="prova"></div>

<picture>
    <source srcset="img.webp" type="image/webp">
    <source srcset="img.jpg" type="image/jpeg">
    <img src="img.jpg">
</picture>


<script>
    Handlebars.compile("{{#with this}}");
    console.log("{{this}}");
    var immagine = new Image;
    immagine.src = "{{this.url}}";
    immagine.width = "{{this.width}}";
    immagine.height = "{{this.height}}";

    console.log(immagine.naturalWidth);
    console.log("immagine.naturalWidth");

    function convertCanvasToImage() {

        var img = new Image();

        img.src = immagine.src;
        img.crossOrigin = "anonymous";  // This enables CORS
        var canvas = document.createElement('canvas')
        var ctx = canvas.getContext('2d');
        canvas.width = immagine.width;
        canvas.height = immagine.height;

        img.onload = function () {

            ctx.drawImage(img, 0, 0, immagine.width, immagine.height);
            img.src = canvas.toDataURL("image/webp", 1.0);
            const trimmedString = img.src.replace('dataimage/jpegbase64', '');
            console.log(trimmedString);
        };


        function getFileFromBase64(string64, fileName) {
            const trimmedString = string64.replace('dataimage/jpegbase64', '');
            const imageContent = atob(trimmedString);
            const buffer = new ArrayBuffer(imageContent.length);
            const view = new Uint8Array(buffer);

            for (let n = 0; n < imageContent.length; n++) {
                view[n] = imageContent.charCodeAt(n);
            }
            const type = 'image/jpeg';
            const blob = new Blob([buffer], { type });
            return new File([blob], fileName, { lastModified: new Date().getTime(), type });
        }

       // return img;

    }

    let webpImage = convertCanvasToImage();
    console.log(webpImage)
  //  document.getElementById("prova").appendChild(webpImage);






   // image.onload = () => {

   //     const canvas = document.createElement('canvas');
    //    canvas.width = image.naturalWidth;
    //    canvas.height = image.naturalHeight;
    //    canvas.getContext('2d').drawImage(image, 0, 0);

       // canvas.toBlob((blob) => {

            // Now we have a `blob` containing webp data

            // Use the file rename trick to turn it back into a file
        //U    const myImage = new File([blob], 'my-new-name.webp', { type: blob.type });

       // }, 'image/webp');
    //    console.log(this);
   // };

   // image.srcObject = immagineSrc;




    Handlebars.compile("{{/with}}");
</script>
